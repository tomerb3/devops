def itc_deployment_configs_folder='test'
def itc_deployment_configs_branch=''
def executingUser=''
def configBuildTagSource=''
def pushedConfigHash=''
def deployment_configs_build_tag=''


pipeline{
  agent {node {label 'linux'}}
  options{
    buildDiscarder(
      logRotator(daysToKeepStr: '5', numToKeepStr: '50')
    )
    disableConcurrentBuilds()
  }

parameters {

        extendedChoice( 
            name: 'PROJECT', 
            defaultValue: '', 
            description: 'project.', 
            type: 'PT_SINGLE_SELECT', 
            groovyScript: """
def gettags = ("git ls-remote -t https://github.com/tomerb3/devops.git").execute()
return gettags.text.readLines().collect { it.split()[1].replaceAll('refs/tags/', '').replaceAll("\\\\^\\\\{\\\\}", '')
}
""",
    )
  
    }





  environment{
      def GENERATED_BUILD_TAG=''
  }

  stages{
    stage('parameterBuild'){
      when{ expression{params.SkipRun}}
      steps{
        script{
          echo 'Setting job parameters'
        }
      }
    }
    stage('run'){
      when{ expression{!params.SkipRun}}
      stages{

        stage('Deployment Config Run'){
          steps{
            script{
              echo "running itc-deployment-configs on hash ${pushedConfigHash}"
          
          
            }
          }
        }
      }//run stages
      post{
        success{
          script{
            env.GENERATED_BUILD_TAG=deployment_configs_build_tag
          }
        }
      }
    }//stage run
  }//job stages
}//pipeline

def getUserNameFromCause(currentBuild){
  def userCause
  try{
    userCause=currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
    if (userCause==null || userCause.size()<1){
      return ''
    }
    userCause=userCause[0]
  }catch(all){
    return ''
  }
  return userCause.userName!=null?"${userCause.userName}":''
}
